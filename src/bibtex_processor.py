import bibtexparser
import json
import os
import shutil

FILE_TYPES = ['in_preparation', 'preprints', 'publications', 'talks', 'thesis']

# Set the path to the original BibTeX files and the autogenerated files
BIB_FILES_PATH = '../static/bib_files'
AUTOGENERATED_FILES_PATH = '../static/autogenerated_files'

# Store the entry IDs to ensure uniqueness
entry_ids = set()

def load_bibtex(file_path):
    """Load BibTeX entries from a file.

    Args:
        file_path (str): The path to the BibTeX file.

    Returns:
        BibDatabase: A BibDatabase object containing the parsed BibTeX entries.
    """
    with open(file_path) as bibtex_file:
        return bibtexparser.load(bibtex_file)
    
def save_bibtex_as_json(bibtex_entries, json_path):
    """Save BibTeX entries as a JSON file.

    Args:
        bibtex_entries (list): A list of BibTeX entries.
        json_path (str): The path to the JSON file where entries will be saved.
    """
    with open(json_path, 'w') as json_file:
        json.dump(bibtex_entries, json_file, indent=4)

def split_bibtex(bibtex_entries, bib_path, entry_type):
    """Split BibTeX entries into individual files, each containing a single entry.

    Args:
        bibtex_entries (list): A list of BibTeX entries.
        bib_path (str): The directory where individual BibTeX files will be saved.
        entry_type (str): The type of the entry (e.g., 'publications', 'talks').
    """
    for entry in bibtex_entries:
        # Create a new BibTeX database for each entry
        entry_lib = bibtexparser.bibdatabase.BibDatabase()
        entry_lib.entries = [entry]

        # Generate BibTeX content for the entry
        writer = bibtexparser.bwriter.BibTexWriter()
        entry_bibtex_content = writer.write(entry_lib)

        entry_id = entry.get('ID', None)

        if not entry_id or entry_id.startswith('pres'):
            print("Entry ID not found. Generating a unique ID...")

            # AUTHOR_YEAR_TITLE_INDEX (e.g., Smith_2021_MyTalk_1)
            entry_id_base = f"""{entry.get('author', 'unknown_author').split(',')[0].replace(' ', '_')}
                            _{entry.get('year', 'unknown_year')}
                            _{entry.get('title', 'unknown_title').split(' ')[0]}"""

            # Check if is necessary to add an index to the entry ID
            entry_id = entry_id_base
            entry_id_index = 1
            while entry_id in entry_ids:
                entry_id = f"{entry_id_base}_{entry_id_index}"
                entry_id_index += 1
            
            entry_ids.add(entry_id)

            # Set the entry ID to the entry
            entry['ID'] = entry_id

        # Create the output folder if it does not exist
        os.makedirs(bib_path, exist_ok=True)

        # Create the output file path using the entry ID
        output_path = bib_path + entry_id + '.bib'
        
        # Write the BibTeX content to a new file
        with open(output_path, 'w') as bib_file:
            bib_file.write(entry_bibtex_content)

        print(f"Entry saved to {output_path}")

def process_publications():
    """Process publications and talks by splitting and saving them as individual files and JSON.

    This function reads BibTeX entries for publications and talks, splits them into individual
    entries, and saves them both as individual BibTeX files and as JSON files. Publications are
    further split into articles and preprints based on their entry type.
    """
    
    print("Cleaning up outdated autogenerated files...")

    # Delete all autogenerated files
    shutil.rmtree(AUTOGENERATED_FILES_PATH, ignore_errors=True)

    # Create the directories for the autogenerated files
    for file_type in FILE_TYPES:
        os.makedirs(f'{AUTOGENERATED_FILES_PATH}/individual_bib_files/{file_type}', exist_ok=True)
        os.makedirs(f'{AUTOGENERATED_FILES_PATH}/json_files/{file_type}', exist_ok=True)

    print("Processing publications and talks...")

    for file_type in FILE_TYPES:
        # Load the BibTeX files for publications and talks
        bibtex_file = load_bibtex(f'{BIB_FILES_PATH}/{file_type}.bib')

        # Extract the entries from the loaded BibTeX data
        bibtex_entries = bibtex_file.entries

        # Save the publication entries, preprint entries, and talk entries as JSON files
        save_bibtex_as_json(bibtex_entries, f'{AUTOGENERATED_FILES_PATH}/json_files/{file_type}.json')

        # Split the publication, preprint, and talk entries into individual BibTeX files
        split_bibtex(bibtex_entries, f'{AUTOGENERATED_FILES_PATH}/individual_bib_files/{file_type}/', file_type)

    print("Processing complete.")

if __name__ == '__main__':
    process_publications()
